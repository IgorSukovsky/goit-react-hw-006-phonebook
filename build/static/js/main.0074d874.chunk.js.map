{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","redux/phonebook/phonebookAction.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","redux/phonebook/phonebookReducer.js","redux/rootReducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","actions","addContact","createAction","handleDelete","handleChange","setContacts","connect","handleSubmit","useState","name","setName","number","setNumber","event","currentTarget","value","className","styles","form","onSubmit","evt","preventDefault","title","onChange","inputContact","type","pattern","required","placeholder","btn","Filter","handleFilter","filter","block","htmlFor","id","input","ContactsListItem","item","textContent","onClick","state","contacts","contact","items","console","log","ul","map","formattedFilter","toLowerCase","trim","filteredItems","includes","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","term","some","alert","newTodo","uuid","target","contactItemsReducer","createReducer","payload","_","filterReducer","phonesReducer","combineReducers","rootReducer","store","configureStore","reducer","ReactDOM","render","App","document","getElementById"],"mappings":"oIACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,sBAAsB,MAAQ,wB,mBCAtFD,EAAOC,QAAU,CAAC,IAAM,6BAA6B,YAAc,uC,mBCAnED,EAAOC,QAAU,CAAC,GAAK,0B,uICWRC,EAFC,CAAEC,WARCC,YAAa,sBAQFC,aANTD,YAAa,kBAMUE,aAJvBF,YAAa,oBAIwBG,YAFtCH,YAAa,wB,OCsElBI,cAAQ,KAAM,CAAEL,WAAYD,EAAQC,YAApCK,EAtEK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACrB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMR,EAAe,SAACS,GACpB,MAAwBA,EAAMC,cAAtBL,EAAR,EAAQA,KAAMM,EAAd,EAAcA,MAEd,OAAQN,GACN,IAAK,OACHC,EAAQK,GACR,MAEF,IAAK,SACHH,EAAUG,GACV,MAEF,QACE,SAaN,OACE,mCACE,uBAAMC,UAAWC,IAAOC,KAAMC,SAXjB,SAACC,GAChBA,EAAIC,iBAEJd,EAAa,CAAEE,OAAME,WAErBD,EAAQ,IACRE,EAAU,KAKR,UACE,sBAAMI,UAAWC,IAAOK,MAAxB,kBACA,uBACEC,SAAUnB,EACVY,UAAWC,IAAOO,aAClBT,MAAON,EACPgB,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRJ,MAAM,kcACNK,UAAQ,EACRC,YAAY,wBAEd,sBAAMZ,UAAWC,IAAOK,MAAxB,oBACA,uBACEN,UAAWC,IAAOO,aAClBf,KAAK,SACLgB,KAAK,MACLF,SAAUnB,EACVW,MAAOJ,EACPe,QAAQ,yFACRJ,MAAM,giBACNK,UAAQ,EACRC,YAAY,wBAEd,wBAAQZ,UAAWC,IAAOY,IAAKJ,KAAK,SAApC,iC,iBCxCOK,EAvBA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,OAC9B,OACE,sBAAKhB,UAAWC,IAAOgB,MAAvB,UACE,uBAAOjB,UAAWC,IAAOK,MAAOY,QAAQ,SAAxC,oCAGA,uBACEC,GAAG,SACH1B,KAAK,SACLgB,KAAK,OACLT,UAAWC,IAAOmB,MAClBb,SAAUQ,EACVhB,MAAOiB,Q,iBCaAK,EA1BU,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMnC,EAAmB,EAAnBA,aACxBM,EAAiB6B,EAAjB7B,KAAME,EAAW2B,EAAX3B,OAEd,OACE,6BACE,sBAAKK,UAAWC,IAAOsB,YAAvB,UACE,iCACG9B,EADH,KACWE,KAEX,wBAAQK,UAAWC,IAAOY,IAAKW,QAASrC,EAAxC,qB,iBCyBOG,eANS,SAACmC,GACvB,MAAO,CACLC,SAAUD,EAAME,WAIoB,CAAExC,aAAcH,EAAQG,cAAjDG,EA7BM,SAAC,GAA6B,IAA3BH,EAA0B,EAA1BA,aAAcyC,EAAY,EAAZA,MAEpC,OADAC,QAAQC,IAAIF,GAEV,mCACE,oBAAI5B,UAAWC,IAAO8B,GAAtB,SACGH,EAAMI,KAAI,SAACV,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNnC,aAAc,kBAAMA,EAAamC,EAAKH,MAFjCG,EAAKH,cCkFP7B,eAPS,SAACmC,GACvB,MAAO,CACLT,OAAQS,EAAMC,SAASV,OACvBU,SAAUD,EAAMC,SAASE,SAIW,CACtCxC,aAAcJ,EAAQI,aACtBD,aAAcH,EAAQG,aACtBF,WAAYD,EAAQC,WACpBI,YAAaL,EAAQK,aAJRC,EAvFE,SAAC,GAOX,IANL0B,EAMI,EANJA,OACA5B,EAKI,EALJA,aACAD,EAII,EAJJA,aACAuC,EAGI,EAHJA,SACAzC,EAEI,EAFJA,WACAI,EACI,EADJA,YA4CM4C,EAAkBjB,EAAOkB,cAAcC,OAEvCC,EAAgBV,EAASV,QAAO,SAACM,GAAD,OACpCA,EAAK7B,KAAKyC,cAAcG,SAASJ,MAcnC,OAXAK,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aACnDJ,GACFlD,EAAYkD,KAEb,CAAClD,IAEJiD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAUnB,MAC/C,CAACA,IAGF,sBAAK1B,UAAU,YAAf,UACE,2CACA,cAAC,EAAD,CAAaT,aA5CI,SAACuD,GACpB,GAAKA,EAQL,GAHoBpB,EAASqB,MAC3B,SAACpB,GAAD,OAAaA,EAAQlC,KAAKyC,gBAAkBY,EAAKrD,KAAKyC,iBAGtDc,MAAM,+CAAcF,EAAKrD,KAAO,yFADlC,CAKA,IAAMwD,EAAU,CACd9B,GAAI+B,cACJzD,KAAMqD,EAAKrD,KACXE,OAAQmD,EAAKnD,QAIfV,EAAWgE,QAnBTD,MAAM,0IA2CN,0CACA,gCACE,cAAC,EAAD,CAAQhC,OAAQA,EAAQD,aApDT,SAACX,GACpB,IAAQL,EAAUK,EAAI+C,OAAdpD,MACRX,EAAaW,MAmDT,cAAC,EAAD,CAAc6B,MAAOQ,EAAejD,aAzDnB,SAACgC,GACtBhC,EAAagC,e,8BCvBJiC,EAAsBC,YAAc,IAAD,mBAC7CrE,EAAQC,YAAa,SAACwC,EAAD,OAAU6B,EAAV,EAAUA,QAAV,4BAA4B7B,GAA5B,CAAmC6B,OADX,cAE7CtE,EAAQK,aAAc,SAACkE,EAAD,YAAMD,WAFiB,cAG7CtE,EAAQG,cAAe,SAACsC,EAAD,OAAU6B,EAAV,EAAUA,QAAV,OACtB7B,EAAMT,QAAO,qBAAGG,KAAgBmC,QAJY,IAOnCE,EAAgBH,YAAc,GAAD,eACvCrE,EAAQI,cAAe,SAACmE,EAAD,YAAMD,YAQjBG,EALOC,YAAgB,CACpC9B,MAAOwB,EACPpC,OAAQwC,ICXKG,EAHKD,YAAgB,CAClChC,SAAU+B,ICGGG,EAJDC,YAAe,CAC3BC,QAASH,ICIXI,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAACK,EAAD,MAEFC,SAASC,eAAe,U,kBCX1BrF,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,aAAe,kCAAkC,IAAM,4B","file":"static/js/main.0074d874.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Filter_block__NtoTT\",\"title\":\"Filter_title__otkFl\",\"input\":\"Filter_input__3X1Az\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactListItem_btn__3KqAo\",\"textContent\":\"ContactListItem_textContent__2SBtn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"ContactList_ul__1MqIW\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contact/addContact\");\r\n\r\nconst handleDelete = createAction(\"contact/Delete\");\r\n\r\nconst handleChange = createAction(\"contact/OnChange\");\r\n\r\nconst setContacts = createAction(\"contact/setContacts\");\r\n\r\nconst actions = { addContact, handleDelete, handleChange, setContacts };\r\n\r\nexport default actions;\r\n","import { useState } from \"react\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../redux/phonebook/phonebookAction\";\r\n\r\n// ===============================================================\r\nconst ContactForm = ({ handleSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const onSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    handleSubmit({ name, number });\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.form} onSubmit={onSubmit}>\r\n        <span className={styles.title}>Name</span>\r\n        <input\r\n          onChange={handleChange}\r\n          className={styles.inputContact}\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          placeholder=\"имя:\"\r\n        />\r\n        <span className={styles.title}>Number</span>\r\n        <input\r\n          className={styles.inputContact}\r\n          name=\"number\"\r\n          type=\"tel\"\r\n          onChange={handleChange}\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          placeholder=\"тел:\"\r\n        />\r\n        <button className={styles.btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, { addContact: actions.addContact })(ContactForm);\r\n// ===============================================================\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     id: uuid(),\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n\r\n//   handleChange = (evt) => {\r\n//     this.setState({ [evt.target.name]: evt.target.value });\r\n//   };\r\n\r\n//   onSubmit = (evt) => {\r\n//     evt.preventDefault();\r\n\r\n//     this.props.handleSubmit(this.state);\r\n\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <form className={styles.form} onSubmit={this.onSubmit}>\r\n//           <span className={styles.title}>Name</span>\r\n//           <input\r\n//             onChange={this.handleChange}\r\n//             className={styles.inputContact}\r\n//             value={this.state.name}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             placeholder=\"имя:\"\r\n//           />\r\n//           <span className={styles.title}>Number</span>\r\n//           <input\r\n//             className={styles.inputContact}\r\n//             name=\"number\"\r\n//             type=\"tel\"\r\n//             onChange={this.handleChange}\r\n//             value={this.state.number}\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//             placeholder=\"тел:\"\r\n//           />\r\n//           <button className={styles.btn} type=\"submit\">\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n// ContactForm.propTypes = {\r\n//   handleSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ handleFilter, filter }) => {\r\n  return (\r\n    <div className={styles.block}>\r\n      <label className={styles.title} htmlFor=\"filter\">\r\n        Find contacts by name:\r\n      </label>\r\n      <input\r\n        id=\"filter\"\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        className={styles.input}\r\n        onChange={handleFilter}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./ContactListItem.module.css\";\r\nconst ContactsListItem = ({ item, handleDelete }) => {\r\n  const { name, number } = item;\r\n\r\n  return (\r\n    <li>\r\n      <div className={styles.textContent}>\r\n        <span>\r\n          {name}: {number}\r\n        </span>\r\n        <button className={styles.btn} onClick={handleDelete}>\r\n          X\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsListItem.propTypes = {\r\n  item: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../redux/phonebook/phonebookAction\";\r\n// import actions from \"../../redux/phonebook/phonebookAction\";\r\nimport ContactsListItem from \"../ContactListItem/ContactListItem\";\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nconst ContactsList = ({ handleDelete, items }) => {\r\n  console.log(items);\r\n  return (\r\n    <>\r\n      <ul className={styles.ul}>\r\n        {items.map((item) => (\r\n          <ContactsListItem\r\n            key={item.id}\r\n            item={item}\r\n            handleDelete={() => handleDelete(item.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({ id: PropTypes.string.isRequired })\r\n  ).isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: state.contact,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { handleDelete: actions.handleDelete })(\r\n  ContactsList\r\n);\r\n","// import { Component } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport ContactForm from \"./components/ContactForm//ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport ContactsList from \"./components/ContactList/ContactList\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"./redux/phonebook/phonebookAction\";\r\n\r\nconst Contacts = ({\r\n  filter,\r\n  handleChange,\r\n  handleDelete,\r\n  contacts,\r\n  addContact,\r\n  setContacts,\r\n}) => {\r\n  // const [contacts, setContacts] = useState([]);\r\n  // const [filter, setFilter] = useState(\"\");\r\n\r\n  // const handleDelete = (id) => {\r\n  //   setContacts((prevContacts) => {\r\n  //     return prevContacts.filter((contact) => contact.id !== id);\r\n  //   });\r\n  // };\r\n\r\n  const onHandleDelete = (id) => {\r\n    handleDelete(id);\r\n  };\r\n\r\n  const handleFilter = (evt) => {\r\n    const { value } = evt.target;\r\n    handleChange(value);\r\n  };\r\n\r\n  const handleSubmit = (term) => {\r\n    if (!term) {\r\n      alert(\"Поле не может быть пустым!\");\r\n      return;\r\n    }\r\n\r\n    const isDuplicate = contacts.some(\r\n      (contact) => contact.name.toLowerCase() === term.name.toLowerCase()\r\n    );\r\n    if (isDuplicate) {\r\n      alert(\"Контакт: \" + term.name + \" уже существует \");\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      id: uuid(),\r\n      name: term.name,\r\n      number: term.number,\r\n    };\r\n\r\n    // setContacts((prevContacts) => [newTodo, ...prevContacts]);\r\n    addContact(newTodo);\r\n  };\r\n\r\n  const formattedFilter = filter.toLowerCase().trim();\r\n\r\n  const filteredItems = contacts.filter((item) =>\r\n    item.name.toLowerCase().includes(formattedFilter)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, [setContacts]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm handleSubmit={handleSubmit} />\r\n      <h2>Contacts</h2>\r\n      <div>\r\n        <Filter filter={filter} handleFilter={handleFilter} />\r\n        <ContactsList items={filteredItems} handleDelete={onHandleDelete} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filter: state.contacts.filter,\r\n    contacts: state.contacts.items,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  handleChange: actions.handleChange,\r\n  handleDelete: actions.handleDelete,\r\n  addContact: actions.addContact,\r\n  setContacts: actions.setContacts,\r\n})(Contacts);\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./phonebookAction\";\r\n\r\nexport const contactItemsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.setContacts]: (_, { payload }) => payload,\r\n  [actions.handleDelete]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nexport const filterReducer = createReducer(\"\", {\r\n  [actions.handleChange]: (_, { payload }) => payload,\r\n});\r\n\r\nconst phonesReducer = combineReducers({\r\n  items: contactItemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default phonesReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport phonesReducer from \"./phonebook/phonebookReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: phonesReducer,\r\n});\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport \"./index.css\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2PyOw\",\"title\":\"ContactForm_title__2FZMI\",\"inputContact\":\"ContactForm_inputContact__3DENR\",\"btn\":\"ContactForm_btn__1TBcd\"};"],"sourceRoot":""}